Review DropDown:

How many dropdowns do we have?
-We have 2 types of dropdowns:
-HTML dropdown
-Select dropdown

How do we handle dropdowns?
-First we will inspect and see what type of dropdown it is
-if it is HTML dropdown (non-select), we will just locate it with any locator and click on it
-if it is Select dropdown (has <select> tag), we will use Select class to handle it
Select class is coming from Selenium Library

How do we get all of the options from Select dropdown?
.getOptions()

What is the return type?
-List<WebElement>

How do we get currently selected option?
.getFirstSelectedOption()
-This method can be used to get default option
-Also can be used to get the option after select something

What is the return type?
-Single WebElement

How do we select options from Select dropdown?
-We can use 3 methods provided by Selenium library
-selectByVisibleText
-selectByValue
-selectByIndex

Syntax of how do we handle Select dropdown?
-we create object of Select class
-We need to locate the dropdown <select> tag itself and pass it into Select constructor

Select dropdownName = New Select(driver.findElement(By.LocatorOfSelectTag));

-We can use the object for handling the dropdown

dropdownName.selectByVisibleText();

-----------------------------------------------------------------------------------------------------------------------

ALERT:

What is an alert?
-Some pop-ups happen on the page
-Developers use alerts to get users attention to deliver some content

How many types of alerts we have?
-We have 2 types of Alerts

#1 HTML Alert (NON-JS Alert)
-This will be present inside of the <html> page as regular webElement.
-There is nothing special about this alert, we just locate and click

#2 JAVASCRIPT Alert
We have 3 types of JS Alert:

    #1. Information/Warning Alert:
    -users can only accept this alert

    #2. Confirmation Alert:
    -User can accept or decline

    #3. Prompt Alert:
    -User can accept, decline, and also sendKeys

How do we handle Alerts using Selenium?
-I will check the type of alert
-After making sure it is a JS-Alert, we will use Alert interface from Selenium library to switch driver to focus on Alert itself

Alert alert = driver.switchTo().alert();
alert.accept();
alert.dismiss();
alert.sendKeys();
alert.sendText();

------------------------------------------------------------------------------------------------------------------------

IFRAME:

What is an Iframe?
-It is a HTML page inside another HTML page
-Most of the time it is used to create independent sections in a page for ads, maps, video content or anything related to webPage.

How do we handle iframes?
-Selenium web driver can focus only one thing at a time.
-Therefore we must switch its focus from default <html> to iframe <html> before being able to do any action inside of it.

Whats happens if we do not switch to inner iframe?
-If we try to locate any webElement before switching, we will get NoSuchElementException.

How many ways we have to switch to inner iframe?
#1. by index:
-starts from 0
-we will count it

  driver.switchTo().frame(int index)

#2. by id/name value:
-if there is id or name attribute we can just pass their value

driver.switchTo().frame("value of id");

#3. by locating it as webElement
- we just locate iframe tag itself as a webElement and pass into frame method

driver.switchTo().frame(driver.findElement(By.locator))

How do we go switch driver's focus to default html from iframe?
-driver.switchTo().parentFrame() --> if there is nested iframe it will go parent frame
-driver.switchTo().defaultContent() --> This will take us main HTML

1 <html>

2 <html>

3 <html> ---> driver.switchTo().parentFrame(); --> focus on line #2

    </html> ---> driver.switchTo().defaultContent() --> focus on line #1

 </html>

------------------------------------------------------------------------------------------------------------------------

WINDOWS:

Is there any difference for selenium if it is a tab or window?
-No, regardless if it is a window or tab it will always be a window for Selenium

How does Selenium know which window is different from which?
-windowHandles

What is a window handle?
-A randomly generated unique alphanumeric ID for each window
-Every window has their own window handle randomly generated by Selenium
-We don't have to do any special fo rit

How do we get the current window's handle?
.getWindowHandle()

What is the return type?
-String
-it will capture and return the current window handle as a String.

How do we get all currently opened windows handles?
.getWindowHandles()

What is the return type?
- Set<String>
- Selenium will only return the window handles from currently executed session

Syntax: driver.switchTo().window(eachWindow);

------------------------------------------------------------------------------------------------------------------------
 XPATH:

How do we go from parent to direct child?
- "/" will take us to the direct child of given specific parent

//tagName[@attribute='value']/directChildTag

How do we go from parent to any child?
- "//" will take us to any child
- it doesn't have to be direct child

How do we go from child to parent?
- "/.."
- We do not have to provide any tagName here. It will just take us to the parent

How do we go from sibling to sibling?
There are 2 methods for going from sibling to sibling:
-"/preceding-sibling::" will go to the sibling that comes before
-"/following-sibling::" will go to the sibling that comes after

-The web element we locate will become starting point (index 0)
- We decide whether we want to go preceding or ollowing sibling
- we count and we pass the index number

Ex: Locate option Orange 3 --> //option[@value='3']
    <select>
2       <option ></option>                      --> preceding element 2
1       <option ></option>                      --> preceding element 1
0       <option value="3"> Orange 3</option>    --> starting element 0
1       <option ></option>                      --> following element 1
2       <option ></option>                      --> following element 2
    </select>

--> Locate number 2 with using xpath: //option[@value='3']/preceding-sibling::option[2]

--> Locate option 3 with using xpath: //option[@value='3']/


How do we use indexed with xpath?
- //tagName[@attribute='value'[2]
- //If we use indexes without parenthesis, this way will work only in direct sibling

- (//tagName[@attribute='value']) [2]
- if we use indexes with parenthesis, this way will work and index through all webElements in HTML

--->Locate month May using its value
(//option[@value='4'])[1]
--->Locate month March using May locator as a base and use sibling
(//option[@value='4'])[1]/preceding-sibling::option[2]

P.I.Q:
How do we handle dynamic web elements?
How do we handle web elements with dynamic attribute value?

Dynamic attribute value: it means some part of an attribute value is changing when the page is refreshed.

Solution #1. We can locate a parent/child that is not dynamic and move fom there.

Solution #2. We will use the methods provided by xpath: contains()
                                                        starts-with()
                                                        ends-with()

                                                 cssSelector: contains() --> *
                                                              starts-with() --> ^
                                                              ends-with() --> $
Before refreshing the page ---> ABC123
Before refreshing the page ---> ABD1_128


XPATH --> //tagname[starts-with(@attribute,'value')]
          //input[starts-with)@data-ved,'0ahuek')]

cssSelector --> tagma,e[attribute^='value']
                input[data-ved^='08fujdhi']

xpath --> tagname[ends-with(@attribute,'value')]
      --> //input[contains(@data-ved, 'UDCAY')]

cssSelector --> tagname[attribute*='value']
                input[data-ved*='UDCAY']

------------------------------------------------------------------------------------------------------------------------

WEBTABLES:

How do we handle webtable using Selenium?
-We write custom locators using xpath or cssSelector and get data we want to get

How do we create HTML table
-<table> tag creates html table

#1 We create <table> tag
#2 We create <tr>
#3 We create cells which is <td>

tr: table row --> used to create rows inside table
th: table header --> used to create cells, but it will make content bolded and centered
td: table data --> used to create cells inside of rows in table


P1- WRITE A LOCATOR THAT RETURNS THE TABLE 1 ITSELF
//table[@id='table1']

P2- WRITE A LOCATOR THAT RETURNS ALL ROWS OF THE TABLE 1
//table[@id='table1']//tr

P3- WRITE A LOCATOR THAT RETURNS ALL ROWS INSIDE BODY - TABLE 1
//table[@id='table1']//tbody//tr

P3- WRITE A LOCATOR THAT RETURNS ALL OF THE CELLS IN ALL OF THE ROW (IN BODY)
//table[@id='table1']//tbody//tr[3]

P5- WRITE A LOCATOR THAT RETURNS ALL OF THE CELLS IN ALL OF THE ROW (IN BODY)
//table[@id='table1']//tbody//tr//td

P6- WRITE A LOCATOR THAT RETURNS ALL OF THE FIRST NAMES FROM TABLE
//table[@id='table1']/tbody//tr//td[2]
//td[2] --> get me the second cells from all rows

P7- WRITE A LOCATOR THAT RETURNS FRANKS CELL SPECIFICALLY
//table[@id='table1']/tbody//tr[2]//td[2]

P8- WRITE A LOCATOR THAT RETURNS FRANKS CELL SPECIFICALLY US FRANKS TEXT
//table[@id='table1']//td[.='Frank']

P9- WRITE A LOCATOR THAT RETURNS FRANKS CELL SPECIFICALLY US JASONS TEXT
//table[@id='table1']//td[.='Jason']

P10- WRITE A LOCATOR THAT RETURNS JASONS DUE AMOUNT BASED ON JASONS NAME
//table[@id='table1']//td[.='Jason']/following-sibling::td[2]

P11- WRITE A LOCATOR THAT RETURNS ALL EMAILS THAT HAS @50 DUE DATE












