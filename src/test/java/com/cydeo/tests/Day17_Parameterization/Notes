Today's schedule:
- Review
- TakesScreenshot

----------------------------------------------------------------------------------------------------------------------

Where do we control or trigger our framework?
-Runner class
-CukesRunner class
-TestRunner

- @RunWith(Cucumber.class) -> it is coming from Junit
-using this annotation we make our class runnable and we also give information that is going to be Cucumber class

- @CucumberOptions() --> We can pass options to control our framework

What aspects of the project do we control from Runner class?

plugin : determines what type of report we want to generate without project, and also where we want to store.

features : we provide the path of the "features" directory and let our project know where we find all of the feature files

glue : we provide the path of the "step_definitions" package

dryRun : determines if we want to execute step_definitions or not
-if dryRun = true --> dryRuns is turned on, and step_definitions are turned off (will not run)
-if dryRun = false --> dryRun is turned off, and step_definitions are turned on (will run)

-This is mostly used for when implementing new steps and step_definitions, and we do not want to run the code and open
browser etc, just to ge snippets
-we turned off the step_definitions and just generate snippets

-tags :
What are they and why do we use them?

-Tags allows us to create different scenario suited or groups to run
-We can include/exclude different feature files or scenarios using tags

-or : if a scenario or feature has either "@a or @b", it will be executed
-and : te scenario/feature MUST have both "@a and @b" to able to get executed
and not : of we want to exclude some certain @tag, group of feature files or scenarios, we can put the tag on top of them,
and use with "@smoke and not @anyTagYouDontWant"

@wip : work in progress --> you can use this tag for your current working scenario daily

------------------------------------------------------------------------------------------------------------------------

BACKGROUND:

- used to create pre-conditions for Scenarios in the same feature file.
- Background: keyword allows us to add repeating steps 1 time, and they will be working with all of the scenarios
in the SAME FEATURE FILE
- Background can only effect the scenarios that are in same feature file
- This is similar to @BeforeMethod from TestNG

------------------------------------------------------------------------------------------------------------------------

HOOKS:

- Hooks are used to create pre- and post- conditions for scenarios and steps
- When we are using Hooks, we need to be extra careful because all the logic we create will be implements
for all of the scenarios and/or steps in our project

------------------------------------------------------------------------------------------------------------------------

PARAMETERIZATION:

- This allow us to pass arguments to our step from feature files
- it allows us to pass different test data to same test; it is data driven testing

------------------------------------------------------------------------------------------------------------------------

HTML REPORTING:

How do we generate reports in framework?
- plugin : will allows us to decide the type of the report we want to generate
- plugin = "html:target/cucumber-report.html"
- "html:" --> type of the report
- "target/" --> where we want to save our report
- "cucumber-report.html" --> the name of the report file that will be auto generated by cucumber

How to open report from framework:

target -> cucumber-reports.html -> open in -> browser -> chrome

------------------------------------------------------------------------------------------------------------------------

TAKING SCREENSHOT

-To take a screenshot, we need to ues a method that is coming from TakesScreenshot interface

-Since driver instance type is WebDriver interface, we have to downcase out driver instance to TakeScreenshot interface
to be able to use ".getScreenshotAs" method

if(scenario.isFailed()){
byte[] screenshot = {{TakesSreenshot)Driver.getDriver()).getScreenshotAsOutputType.BYTES);
        scenario.attach(screenshot, "image/png",scenario.getName());
        }

- byte [] screenshot --> We store byte y byte image in byte type of array we choose BYTES type
which will take screenshot pixel by pixel in bytes size

-we are using scenario class to use attach method to attach screenshot in out scenario

-since we write those codes in After annotation in Hooks class. It will take screen shot after each scenario

How do you take screenshot in framework?

- I use Scenario class to get certain information from current scenario such as name, and condition

- I downcast my driver instance type to TakesScreenshot interface and
use ".getScreenshotAs" method to store screenshots as array of bytes

- And attach my screenshot into report using Scenario class object and attach method