Today's schedule:
- dryRun
- html reports
- Background
- Hooks
- Parameterization

- Tell me about your framework?

Next Coming Topics:
- dataTables
- scenario outlines
- parallel testing
- report generation

--------------------------------------------------------------------------

What is framework?
- Frameworks are basically commonly used and proven approach of creating
file and folder structure, creating smart logic (implementing design
patterns,utilities) to be able to easily handle and maintain project

Why do we create framework?
- Frameworks are created to apply reusability, maintainability, easy
to use, easy to understand, .....

TELL ME ABOUT YOUR FRAMEWORK???

- Basically they want to hear how you created your framework, what we
used in it.

- What tools we used in our project?
- Which programming language we used in project?
- Which testing tools we used in out project and why?
- Which design pattern we used in out project and why?
- What kind of folder structure we created and why?

- I used Java as programming language in my framework.
- I used Selenium for main automation tool that I can find elements do actions used methods all coming from selenium library
- Maven build tool
- Cucumber for adding behave to my framework that everybody even non-tech people can understand
- Junit for testing tool in my framework but I have knowledge for TestNG as well

- Design patterns:
- Page Object Model Design Pattern: I centralize all elements in related page classes
- Singleton Design Pattern : to use single instance driver I have Driver class in utilities package

- Utilities classes we created:
- Driver --> Singleton Design Pattern
- ConfigurationReader --> reading .properties file
- BrowserUtils --> We have utility methods to keep cleaner our classes to not repeat line of codes
- We implemented BDD approach
- We also implemented DDT(Data Driven Testing) in our framework

-----------------------------------------------------------------------

What is BDD (Behavior Driven Development) ?
- BDD is extension of TDD
- It means overall implemented logic is very similar

- How BDD is similar to TDD?
- Instead of writing test script, we write SCENARIOS
- We implement logic that turns those scenarios into actions using JAVA+SELENIUM+JUNIT

- What are the 2 different sides(layer) of BDD ?
#1. BUSINESS LAYER : feature files
#2. IMPLENTATION LAYER : step definitions

#1. BUSINESS LAYER : feature files
- Where we write our features and scenarios in Gherkin language
- Gherkin language is basiccaly English
- It makes it very easy to understand for non-tech member of the team
- We use certain keywords to implement Cucumber logic in fetaure files
- Feature
- Scenario - Scenario Outline - Scenario Template
- Given , When, Then, And, But

#2. IMPLENTATION LAYER : step definitions
- We generate snippets and implement them in "step_definitions" package

- What is a snippet?
- unimplemented step definition methods that are automatically generated by CUCUMBER

- Different ways of generating snippets?
#1. Run the Runner class by using dryRun option and generate the snippets
in console
#2. Hover over the unimplemented step:
- Create step definition --> Select class where we want it
- More options --> Create all steps --> Select class where we want
it
- Put your cursor on unimplemented line:
Windows: Alt + Enter --> Create step definition --> Select class where
we want it
Mac: Option + Enter --> Create step definition --> Select class where
we want it

#3. Run unimplemented scenario from feature file

----------------------------------------------

- DRYRUN: turns on and off the running of step_definitions

- If I do not want to actually run my code, and just want to get
unimplemented snippets, I will tun dryRun on by giving "true" value

- dryRun = true --> do not run my step_definitions, but only check if any step is missing snippet
- dryRun = false --> this will turn off dryRun and our code will run as expected

----------------------------------------------

- Background:
- It is very similar to @BeforeMethod in TestNG
- It runs before each Scenario in that specific feature file
- The step we pass under the Background: will execute onlt once before each step

- Important thing to keep on mind is that "Background:" will be applying
to each and every scenario in the same feature file
- Therefore we must make sure every scenario is able to pick up and
continue where the background is leaving the code- Feature
- Scenario - Scenario Outline - Scenario Template
- Given , When, Then, And, But
#2. IMPLENTATION LAYER : step definitions
- We generate snippets and implement them in "step_definitions" package
- What is a snippet?
- unimplemented step definition methods that are automatically
generated by CUCUMBER
- Different ways of generating snippets?
#1. Run the Runner class by using dryRun option and generate the snippets
in console
#2. Hover over the unimplemented step:
- Create step definition --> Select class where we want it
- More options --> Create all steps --> Select class where we want
it
- Put your cursor on unimplemented line:
Windows: Alt + Enter --> Create step definition --> Select class where
we want it
Mac: Option + Enter --> Create step definition --> Select class where
we want it
#3. Run unimplemented scenario from fetaure file
----------------------------------------------
- DRYRUN: turns on and off the running of step_definitions
- If I do not want to actually run my code, and just want to get
unimplemente snippets, I will tun dryRun on by giving "true" value
- dryRun = true --> do not run my step_definitions, but only check if any
step is missing snippet
- dryRun = false --> this will turn off dryRun and our code will run as
expected
----------------------------------------------
- Background:
- It is very similar to @BeforeMethod in TestNG
- It runs before each Scenario in that specific feature file
- The step we pass under the Background: will execute onlt once before
each step
- Important thing to keep on mind is that "Background:" will be applying
to each and every scenario in the same feature file
- Therefore we must make sure every scenario is able to pick up and
continue where the background is leaving the code

---------------------------------------------

- HOOKS:

- Hooks class will allow us to pass pre and post conditions for each
scenario
- Hooks class is separated  from feature file
- Therefore it will go into the implementation side (step_definitions)

- How does my framework knows where to find Hooks class and execute the annotations?
- Basically logic is coming from cucumber annotations and also glue path we provide in the runner class

- Can we create more than one  @Before, @After, @BeforeStep, @AfterStep
- Yes.

- If we have multiple versions of the same annotation, we can prioritize the running order using the "order" keyword.
- The lower the number passed in the order, earlier it will executed.
- The methods will be executed in the order it is specified with numbers.

@Before (order = 1)
public void setupScenario(){
System.out.println("====Setting up browser using cucumber
@Before");
}

@Before (value = "@login", order = 2)
public void setupScenarioForLogins(){
System.out.println("====this will only apply to scenarios with
@login tag");
}

- We can specify which annotation is running for which scenarios or features using @TAGS.
- If I want some scenario/feature to have pre- /post- conditions, I can
use certain @TAG, and pass the same @TAG into the annotation in Hooks class.

@Before
- comes from cucumber-java dependency
- this will change the behavior of the method we use it.
- this method will be running BEFORE each and every SCENARIO in our
project (unless we specify with @TAGS)

@After
- comes from cucumber-java dependency
- this will change the behavior of the method we use it.
- this method will be running AFTER each and every SCENARIO in our
project (unless we specify with @TAGS)

@BeforeStep
- comes from cucumber-java dependency
- this will change the behavior of the method we use it.
- this method will be running BEFORE each and every STEP in our
project (unless we specify with @TAGS)

@AfterStep
- comes from cucumber-java dependency
- this will change the behavior of the method we use it.
- this method will be running AFTER each and every STEP in our
project (unless we specify with @TAGS)

-----------------------------------------------------------

- Step by Step testing flow in BDD framework?

#1. Creating feature file related to your testcase and with using Gherkin
language keywords you are wting your test steps

#2. We will get unimplemented steps (snippets) from CukesRunner class with
making dryRun=true

#3. We will create StepDefinitions class under step_definition package and we will implement snippets in this class

#4. Before we start to write SELENIUM + JAVA + JUNIT codes we are going to create Page class to store
elements which is related to testcases

#5. We will start to write SELENIUM + JAVA + JUNIT codes in our step methods in StepDefinitions class

#6. To run our StepDefinitions class we need to make sure from CukesRunner
class
- dryRun = false
- tags = "@testRelatedTag"

** @wip--> working in progress
- this tag is very useful for determining your current scenario(test
case) that you are working now.

-------------------------------------------

PARAMETERIZATION: CUCUMBER EXPRESSIONS

- Cucumber Expressions allows us to pass arguments from feature files
- We can pass String, int, float, word
- We can even create our own object type, and pass it through the
feature files
- We are allowed to pass multiple different types of arguments
including some java, and non-java type